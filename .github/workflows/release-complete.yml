name: "Release â€“ Complete"
# concurrency: Ensures that for one branch the workflow is not running multiple
# times at the same time as we will get trouble with the versions and pushes.
concurrency: ci-${{ github.ref }}

on:
  push:
    branches:
      - main
    paths:
      - ".version"

permissions:
  contents: write

jobs:
  read-version:
    runs-on: ubuntu-latest
    outputs:
      next-version: ${{ steps.version.outputs.next_version }}
    steps:
      - name: Checkout repository
        id: checkout-version
        uses: actions/checkout@v4
        with:
          sparse-checkout: .
      - name: Read Version
        id: version
        run: |
          echo "next_version=$(cat .version)" >> $GITHUB_OUTPUT
  release-tag:
    runs-on: ubuntu-latest
    needs:
      - read-version
    outputs:
      tag-name: ${{ steps.tag-release.outputs.tag_name }}
    steps:
      - name: Checkout repository
        id: checkout-tag
        uses: actions/checkout@v4
      - name: Set Git user
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Tag Release
        id: tag-release
        run: |
          next_version="${{ needs.read-version.outputs.next-version }}"
          tag_name="v${next_version}"
          git tag --annotate --message "Release ${next_version}" "${tag_name}"
          git push origin "${tag_name}"
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
  release-complete:
    runs-on: ubuntu-latest
    needs:
      - release-tag
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release-url: ${{ steps.create-release.outputs.url }}
    steps:
      - name: Checkout repository
        id: checkout-complete
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release-tag.outputs.tag-name }}
      - name: Create Artifacts
        id: create-artifacts
        run: |
          # Example JSON:
          # {
          #   "zip": "dist/lib-bash-0.0.3.zip",
          #   "tar": "dist/lib-bash-0.0.3.tar.gz"
          # }
          artifactsJson="$(bin/build.sh json)"
          echo "artifact-zip=$(echo $artifactsJson | jq -r .zip)" >> $GITHUB_OUTPUT
          echo "artifact-tar=$(echo $artifactsJson | jq -r .tar)" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create-release
        # https://github.com/softprops/action-gh-release
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          files: |
            ${{ steps.create-artifacts.outputs.artifact-zip }}
            ${{ steps.create-artifacts.outputs.artifact-tar }}
          generate_release_notes: true
          name: ${{ needs.release-tag.outputs.tag-name }}
          tag_name: ${{ needs.release-tag.outputs.tag-name }}
  release-summary:
    # Output Markdown Report to $GITHUB_STEP_SUMMARY
    runs-on: ubuntu-latest
    needs:
      - read-version
      - release-tag
      - release-complete
    steps:
      - name: summary
        id: summary
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          # ${{ github.workflow }} (${{ github.event.inputs.release_type }})

          * **Version**: ${{ needs.read-version.outputs.next-version }}
          * [Release ${{ needs.release-tag.outputs.tag-name }}](
            ${{ needs.release-complete.outputs.release-url }}
            )
