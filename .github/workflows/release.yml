name: "Release"
# concurrency: Ensures that for one branch the workflow is not running multiple
# times at the same time as we will get trouble with the versions and pushes.
concurrency: ci-${{ github.ref }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: |
          Release Type: "minor" is typical for license update release. More   details in README.
        required: true
        default: "minor"
        type: choice
        options:
          - major
          - minor
          - patch

run-name: |
  ${{ github.workflow }} (${{ github.event.inputs.release_type }})

permissions:
  contents: write
  pull-requests: write

jobs:
  release-prepare:
    runs-on: ubuntu-latest

    outputs:
      prev-version: ${{ steps.version.outputs.prev_version }}
      next-version: ${{ steps.version.outputs.next_version }}
      pull-request-branch: ${{ steps.create-pull-request.outputs.pull-request-branch }}
      pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}

    steps:
      - name: Checkout repository
        id: checkout-prepare
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update Version
        id: version
        run: |
          echo "prev_version=$(cat .version)" >> $GITHUB_OUTPUT
          bin/version.sh ${{ github.event.inputs.release_type }}
          echo "next_version=$(cat .version)" >> $GITHUB_OUTPUT
      - name: Create pull request
        id: create-pull-request
        # https://github.com/peter-evans/create-pull-request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "ci(release): Update version to ${{ steps.version.outputs.next_version }}"
          branch: release/${{ steps.version.outputs.next_version }}
          title: "Release ${{ steps.version.outputs.next_version }}"
          body: "This pull request updates the version to ${{ steps.version.outputs.next_version }}."
          base: main
  release-await:
    runs-on: ubuntu-latest
    needs: release-prepare
    steps:
      - name: Wait for pull request to be merged
        # https://github.com/actions/github-script
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.release-prepare.outputs.pull-request-number }}
            });
            while (pr.data.merged_at === null) {
              await new Promise(resolve => setTimeout(resolve, 10000));
              pr = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ needs.release-prepare.outputs.pull-request-number }}
              });
            }
  release-tag:
    runs-on: ubuntu-latest
    needs:
      - release-prepare
      - release-await
    outputs:
      tag-name: ${{ steps.tag-release.outputs.tag_name }}
    steps:
      - name: Checkout repository
        id: checkout-tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Git user
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      - name: Tag Release
        id: tag-release
        run: |
          next_version="${{ needs.release-prepare.outputs.next-version }}"
          tag_name="v${next_version}"
          git tag -a -m "Release ${next_version}" "${tag_name}"
          git push origin "${tag_name}"
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
  release-artifacts:
    # The Pull Request is merged. Now we can perform the release.
    runs-on: ubuntu-latest
    needs:
      - release-prepare
      - release-tag
    outputs:
      release-artifacts-url: ${{ steps.upload-artifacts.outputs.artifact-url }}
    steps:
      - name: Checkout repository
        id: checkout-perform
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.release-tag.outputs.tag-name }}
      - name: Upload Release Artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-bash-${{ needs.release-prepare.outputs.next-version }}
          include-hidden-files: true
          path: |
            .version
            README.md
            UNLICENSE
            lib_*.sh
  release-complete:
    runs-on: ubuntu-latest
    needs:
      - release-tag
      - release-artifacts
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      release-url: ${{ steps.create-release.outputs.url }}
    steps:
      - name: Create Release
        id: create-release
        # https://github.com/softprops/action-gh-release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ needs.release-artifacts.outputs.release-artifacts-url }}
          tag_name: ${{ needs.release-tag.outputs.tag-name }}
          name: ${{ needs.release-tag.outputs.tag-name }}
          body: "Release ${{ needs.release-tag.outputs.tag-name }}"
          draft: false
          prerelease: false
  release-summary:
    # Output Markdown Report to $GITHUB_STEP_SUMMARY
    runs-on: ubuntu-latest
    needs:
      - release-prepare
      - release-tag
      - release-complete
    steps:
      - name: summary
        id: summary
        run: |
          cat <<EOF >> $GITHUB_STEP_SUMMARY
          # ${{ github.workflow }} (${{ github.event.inputs.release_type }})

          * **Version**
            * Previous Version: ${{ needs.release-prepare.outputs.prev-version }}
            * Next Version: ${{ needs.release-prepare.outputs.next-version }}
          * [Release ${{ needs.release-tag.outputs.tag-name }}](
            ${{ needs.release-complete.outputs.release-url }}
            )
